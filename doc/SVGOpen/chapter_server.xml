    <section>
        <title>JSXGraph as a front end to server side applications</title>
        <para>JavaScript enables us to use the XmlHTTPRequest object to interact with server side applications. Currently one can use our AJAX wrapper JXG.FileReader or the one
        provided by Prototype<footnote><para><ulink url="http://prototypejs.org">http://prototypejs.org</ulink></para></footnote> and jQuery <footnote><para><ulink url="http://jquery.com">http://jquery.com</ulink></para></footnote>.
        So JSXGraph can be used to visualize the output of server side calculations but provides new input for server applications, too.
        </para>
        <section>
            <title>Just AJAX</title>
            <para>
            For example one can fetch share prices from a web site like Yahoo finance. To do this one needs a script on his own webserver because of security restrictions concerning the XmlHTTPRequest object which
            cannot be used in conjunction with a url that is not on the same server as the web site starting the request. After starting the script from JavaScript it sends back the data from Yahoo which then is parsed by
            the JavaScript and visualized using a curve.
            </para>
           <example>
            <title>JavaScript invoking a PHP script using AJAX</title>
            <programlisting><![CDATA[
var hi, lo, brd, periodical, 
    brd, g, txt, val,
    x = [],
    y = [];
 
 
fetchData = function() {
    new Ajax.Request('/ajax/stockquotes.php', {
        onComplete: function(transport) {
            var t, a;
            if (200 == transport.status) {
                t = transport.responseText;
                a = t.split(',');
                x.push(x.length+1);
                y.push(a[1]);
                val = a[1];  // set the text
                if (!g) { 
                    g = brd.createElement('curve', [x,y],{strokeWidth:3, strokeColor:'green',shadow:true}); 
                    txt = brd.createElement('text', [3,(hi+lo)*0.5,function(){return 'GDAXI = '+val;}],{fontSize:'14px'}); 
                } else {
                    g.dataX = x;                    
                    g.dataY = y;
                }
                brd.update();
            };
    }});
};
 
// Fetch max and min, and start the periodical update.
new Ajax.Request('/ajax/stockquotes.php', {
        onComplete: function(transport) {
            var a, t;
            if (200 == transport.status) {
                t = transport.responseText;
                a = t.split(',');
                hi = a[6]*1.001;
                lo = a[7]*0.999;
                brd = JXG.JSXGraph.initBoard('jxgbox', {axis:true, boundingbox:[0,hi,200,lo]});
                brd.createElement('axis',[[0,lo],[1,lo]]);
            };
    }});
 
      periodical = setInterval(fetchData,1000);  // Start the periodical update
]]>
</programlisting>
<programlisting><![CDATA[
<?php
  $fp = fopen ("http://finance.yahoo.com/d/quotes.csv?s=^gdaxi&f=sl1d1t1c1ohgv&e=.csv","r");
  echo fgets ($fp, 1024);
  fclose ($fp);
?>
      ]]> </programlisting>
        </example>
    </section>
    <section>
    <title>JXG.Server</title>
    <para>
      For quick'n'dirty solutions the AJAX interface is nice. But if you want to implement an interface to a server side program and want to use it with other worksheets or share it with other people, you'd better take
      a look at JXG.Server. This is a frontend to a python based plugin system. These plugins are called modules and can be loaded easily with just one function call. After initializing the functionality is avaiable through
      a JavaScript interface in the browser and all the AJAX stuff like parameter handling and return data parsing is done by the module.
    </para>
    <example>
      <title>
        Python module on the server which multiplies a given number by 3
      </title>
      <para>
      <programlisting><![CDATA[
from JXGServerModule import JXGServerModule
import JXG

class JXGModuleMultiply(JXGServerModule):

    def init(self, resp):
        resp.addHandler(self.mult, 'function(data) { alert(data.y); }')
        return

    def mult(self, resp, x):
        resp.addData('y', 3*x)
        return
      ]]>
      </programlisting>
      This module is in a file called jxgmodulemultiply.py and can be loaded with JXG.Server through
      <programlisting><![CDATA[ JXG.Server.loadModule('jxgmodulemultiply'); ]]></programlisting>
      After the module has been loaded the python function can be accessed with
      <programlisting><![CDATA[ JXG.Server.modules.jxgmodulemultiply.mult(5); ]]></programlisting>
      which will result in an alert notification window displaying "15".</para>
    </example>
    </section>
</section>