<?xml version="1.0" encoding="UTF-8"?>
<?oxygen RNGSchema="http://www.docbook.org/xml/5.0/rng/docbook.rng" type="xml"?>
<article xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.0">
    <info>
        <title>Interactive SVG with JSXGraph</title>
        <subtitle>JSXGraph</subtitle>
        <keywordset>
            <keyword>conference proceedings</keyword>
            <keyword>paper formats</keyword>
        </keywordset>
        <authorgroup>
            <author>
                <personname>
                    <firstname>Bianca</firstname>
                    <surname>Valentin</surname>
                </personname>
                <email>bianca.valentin@uni-bayreuth.de</email>
                <personblurb><para>Bla bla</para></personblurb>
                <affiliation>
                    <jobtitle>PhD student</jobtitle>
                    <org>
                        <orgname>University of Bayreuth</orgname>
                        <orgdiv>Department of mathematics</orgdiv>
                        <address>
                            <city>Bayreuth</city>
                            <street>Universitaetsstr. 30</street>
                            <postcode>95444</postcode>
                            <country>Germany</country>
                            <phone>++49-921 55 3389</phone>
                        </address>   
                    </org>
                </affiliation>
            </author>
            <author>
                <personname>
                    <firstname>Michael</firstname>
                    <surname>Gerhaeuser</surname>
                </personname>
                <email>michael.gerhaeuser@gmail.com</email>
                <personblurb><para>Bla bla</para></personblurb>
                <affiliation>
                    <jobtitle>Student</jobtitle>
                    <org>
                        <orgname>University of Bayreuth</orgname>
                        <orgdiv>Department of mathematics</orgdiv>
                        <address>
                            <city>Bayreuth</city>
                            <street>Universitaetsstr. 30</street>
                            <postcode>95444</postcode>
                            <country>Germany</country>
                            <phone></phone>
                        </address>   
                    </org>
                </affiliation>
            </author>            
        </authorgroup>
        <!-- If you have several authors, you could nest all authors within an authorgroup element -->
        <abstract>
            <para>JSXGraph is a client-side web library for displaying interactive mathematics and drawings in a web browser. This article shall demonstrate the possibilities of JSXGraph and explain how they are implemented.</para>
        </abstract>
    </info>
    <section>
        <title>Introduction</title>
        <para>Para 1</para>
    </section>
    <section>
        <title>Mathematics</title>
        <para>The originally intended purpose of JSXGraph was having a JavaScript library for displaying geometric constructions in a web browser. So it is possible to visualize geometric elements that are taught in schools and universities like points, lines, circles, arcs, and angles, as well as predefined composition elements. JSXGraph not only provides tools for displaying geometric constructions but also for doing calculus like plotting curves starting from function graphs with tangents up to parametric and polar curves, splines or other interpolation methods. </para>
        <section>
            <title>JSXGraph as a web viewer for dynamic geometry software</title>
            <para>Dynamic geometry software (DGS) are computer programs which allow one to create and then manipulate geometric constructions, primarily in plane geometry. In most DGS, one starts construction by putting a few points and using them to define new objects such as lines, circles or other points. After some construction is done, one can move the points one started with and see how the construction changes.</para>
            <para>
            There are lots of different available software packages to play around dynamically with geometry at schools and universities. Most of them are written in Java, such as Geogebra, Cinderella, Compass and Ruler or GEONExT, others like The Geometer's Sketchpad or Cabri offer a Java based web viewer. So if you want to integrate a construction that was created with one of these DGS in a web page, it takes some time to load the corresponding Java applet before you can use it. There are moreover big doubts about the future of Java in a web browser because Java applets are vanishing more and more from the internet and are actually not supported in browsers on modern mobile internet devices. As a result, the idea of JSXGraph was to read GEONExT Files and display them in the browser using JavaScript to manage the corresponding DOM elements of SVG or VML, depending on what browser is used. JavaScript is furthermore used to realize the dynamic in DGS by capturing the browser's mouse events. </para>
        </section>
        <section>
            <title>Currently supported file formats</title>
            <para>Since JSXGraph has evolved from the GEONExT project, the support of its file format is almost complete. 
Other file formats are under development. For example, JSXGraph is involved in the European Intergeo project which shall unite several dynamic geometry softwares (Geogebra, Cabri, GEONExT, Cinderella, etc.) agreeing about a common file format that can be displayed within a browser using the Intergeo reader of JSXGraph. Support for reading Geogebra files directly is under development in cooperation with the Geogebra developers.
            </para>
        </section>
        <section>
            <title>Constructing from scratch</title>
            <para>The JSXGraph API used in the readers for the different file formats can also be used to create a construction from scratch or to manipulate a construction loaded from a given file. JSXGraph contains functions for compass and ruler constructions in euclidean geometry basing on points, lines, circles, arcs, and angles. Those can be intersected or combined in predefined ways. For example one can construct a line that is parallel to another one or a point that is the midpoint between two other points by using integrated JSXGraph methods. Additionally, one can easily implement own composition elements with JavaScript and the above-mentioned functions. 
            </para>
        </section>
        <section>
            <title>Calculus</title>
            <para>Beyond the capabilities of JSXGraph with regard to geometric constructions, one is also able to visualize calculus.</para>
            <para>The possibilities start from plotting simple functiongraphs to displaying more complex graphs like parametric and polar curves which can be analyzed using the implemented methods for tangents, integrals or spline interpolation. 
            </para>
            <para>Example:  examine the influence of function parameters like in code example 1[TODO]</para>
            <para>With an implementation of an explicit Runge-Kutta process, JSXGraph can also solve ordinary differential equations on the fly with the opportunity to change the parameters on runtime and watching the results.
            </para>
        </section>            
    </section>
    <section>
        <title>Turtle graphics</title>
        <para>Mathematic modelling with differential equations can also be done by using turtle graphics. But turtle graphics have their own appeal, too.</para>
        <section>
            <title>Programming with turtle graphics</title>
            <para>With turtle graphics one can easily produce beautiful Lindenmayer systems like plants, penrose tilings, the Sierpinski triangle or the Koch curve. Moreover, abecedarian games like snake can be implemented in a few lines.</para>
        </section>
    </section>
    <section>
        <title>Charts</title>
        <para>Having all the geometric objects with all their possibilities within JSXGraph, it was not difficult to integrate support for charts which provide all the optical properties that are integrated in JSXGraph. So it is possible to create easily dynamic bar charts or interactive pie charts.</para>
        <!--<para>
            JSXGraph uses the style properties that are offered by SVG and VML, so that the geometric objects can be displayed in different colors and styles that can be changed on runtime.</para>        -->
        <section>
            <title>Title of subsubsection</title>
            <para>A paragraph ...</para>
        </section>
    </section>
    <section>
        <title>JSXGraph as front end to server side applications</title>
        <para> A paragraph ...</para>          
    </section>
    <section>
        <title>JSXGraph Plugins</title>
        <para> Para 1</para>
    </section>
    <section>
        <title>Implementation details</title>
        <para>
            The main focus of JSXGraph is on interactivity. The user should experience immediate response to the dragging of points
            with the mouse. So, special care had to be spent on fast reacting to the mouse move events and mouse up events. Contrarily
            we want to exploit the superb output quality of vector graphics. These two controversial goals - 
            speed versus quality - have to be balanced. 
        </para> 
        <para>
            For the browser abstraction JSXGraph uses either the Prototype JavaScript library<footnote><para><ulink url="http://prototypejs.org">http://prototypejs.org</ulink></para>
                </footnote> 
            or 
            jQuery<footnote><para><ulink url="http://jquery.com">http://jquery.com</ulink></para>
                </footnote>.  
            JSXGraph can be used with either of these two libraries equally good. 
            The access to these libraries is restricted to a minimum and it is capsuled in a few lines in the
            source code file jsxgraph.js. These libraries are nerly exclusively used for the corss-browser handling of events.
            Everything else in JSXGraph is built up from scratch and does not rely on third-party libraries.
            So, it should be easy to port JSXGraph to a further framework, if necessary.
        </para>
        <section>
            <title>SVG vs. VML</title>
            <para>
                One of the major user audiences of JSXGraph are schools. In general, schools are adapting only slowly to new technologies.
                That is one of the reason, why Internet Explorer is widely used in schools. Since we can not afford to exclude schools as
                users of JSXGraph we had to adapt it to the Internet Explorer, too. Since the year 1998 
                Microsoft<footnote><para>See <ulink url="http://www.w3.org/TR/1998/NOTE-VML-19980513">http://www.w3.org/TR/1998/NOTE-VML-19980513</ulink> for the specification.</para>
                </footnote> <xref  linkend="VML98"/>
                supports VML 
                - vector markup language - as vector graphic language in the Internet Explorer. 
                Early in the development process of JSXGraph we decided to support SVG and VML directly, without using one of their
                existing abstraction layers. The reason was performance, the existing layers were too slow at that time.
            </para>
            <para>
                SVG and VML are similar in many aspects, but different in many details. In order to realize visual properties VML makes heavily use of
                subnodes of XML nodes. SVG uses mostly attributes for the same visual properties.
                But overall the differences are not too large. The JSXGraph source contains two files SVGRenderer.js and VMLRenderer.js which handle 
                different language features. Each file consists of about 700 lines including comments.
            </para>
            <para>
                In SVG JSXGraph rarely uses CSS formatting.  The reason is that in the beginning of the development process
                the use of CSS styles consumed to much computing resources, especially setting opacity with Firefox. 
                So, nearly all visual properties are realized with attributes and filters. But filters in SVG are still not 
                implemented satisfactorily. Since version 0.76 JSXGraph supports shadows and gradients. 
                The SVG filter to display lines, circles and points with shadows is implemented dynamically with the following
                commands.
                <programlisting><![CDATA[
    this.defs = this.container.ownerDocument.createElementNS(this.svgNamespace,'defs');
    this.svgRoot.appendChild(this.defs);
    this.filter = this.container.ownerDocument.createElementNS(this.svgNamespace,'filter');
    this.filter.setAttributeNS(null, 'id', 'f1');
    this.filter.setAttributeNS(null, 'width', '300%');
    this.filter.setAttributeNS(null, 'height', '300%');
    this.feOffset = this.container.ownerDocument.createElementNS(this.svgNamespace,'feOffset');
    this.feOffset.setAttributeNS(null, 'result', 'offOut');
    this.feOffset.setAttributeNS(null, 'in', 'SourceAlpha');
    this.feOffset.setAttributeNS(null, 'dx', '5');
    this.feOffset.setAttributeNS(null, 'dy', '5');
    this.filter.appendChild(this.feOffset);
    this.feGaussianBlur = this.container.ownerDocument.createElementNS(this.svgNamespace,'feGaussianBlur');
    this.feGaussianBlur.setAttributeNS(null, 'result', 'blurOut');
    this.feGaussianBlur.setAttributeNS(null, 'in', 'offOut');
    this.feGaussianBlur.setAttributeNS(null, 'stdDeviation', '3');
    this.filter.appendChild(this.feGaussianBlur);
    this.feBlend = this.container.ownerDocument.createElementNS(this.svgNamespace,'feBlend');
    this.feBlend.setAttributeNS(null, 'in', 'SourceGraphic');
    this.feBlend.setAttributeNS(null, 'in2', 'blurOut');
    this.feBlend.setAttributeNS(null, 'mode', 'normal');
    this.filter.appendChild(this.feBlend);
    this.defs.appendChild(this.filter);]]></programlisting>
                At the time of writing shadows slow down the browser considerably on the Firefox. Further, there seems to be a bug for
                horizontal and vertical lines. In these cases no shadows are displayed.
                In Webkit based browsers like Chrome and Safari these filters are not implemented, yet. In Opera it looks ugly.
                VML realizes shadows as a subnode. There, no noticable speed reduction is observable.
            </para>
        </section> 
        <section>
            <title>HTML elements</title>
            <para>
                For the display of text, like labels of points or results of computations, JSXGraph does not use the text element of SVG.
                Instead, div tags in HTML are used. That means the browsers display the text as HTML elements above the SVG image. 
                In order to update the text the innerHTML property of HTML is used. This is slow, but since many texts are never changed,
                it is used rarely.
                We decided to use HTML elements for SVG, because 
                <itemizedlist>
                    <listitem>at that time HTML tags and HTML entities in texts were not supported 
                        in the Firefox implementation, 
                        </listitem>
                    <listitem>VML does not contain a text  element. Therefore, we do not need to distinguish SVG and VML 
                        for texts.
                        </listitem>
                </itemizedlist>
            </para>
        </section>  
        <section>
            <title>Speed improvements</title>
            <para>
                In order to make a fast enough reaction to user interaction like mouse move possible, JSXGraph contains many 
                tricks to speed up the computations. Special care about implementation details is still necessary, even if the
                JavaScript interpreters, respectively Just-in-time-compilers, have made huge progress since the development of JSXGraph 
                has been started.
                Here, we list a few of the tricks of the trade, which proved to be useful. Of course, the benefits 
                of most of these tricks depend on the browser implementations and may change with new versions of the browsers.
                <itemizedlist>
                    <listitem>Avoid DOM accesses with getElementById(). When a new SVG node is created, a reference to the DOM node 
                        is safed internally. Later on, access to this node is realized via this pointer variable, exclusively.
                        Using the $() operator of prototype.js or jquery.js proved to be much too slow.
                    </listitem>
                    <listitem>Before a construction is updated, triggered by a mouse move or mouse up event, the redrawing 
                        of the SVG nodes is suspended, until the position of all elements has been recalculated.
                        Then, the redrawing of the SVG nodes is forced.
                <programlisting><![CDATA[
    this.suspendHandle = this.svgRoot.suspendRedraw(10000);
    // Expensive recalculations ...
    this.svgRoot.unsuspendRedraw(this.suspendHandle);
    this.svgRoot.forceRedraw();]]></programlisting>
                    This seems to speed up at least the linux version of Firefox considerably.
                    </listitem>
                    <listitem>Common functions like binomial() and factorial() are realized with memoizer techniques, 
                        as descripted in <xref  linkend="Crockford2008"/>, page 44.
                        Thus, the expensive computation of each value of these functions is done only once.
                    </listitem>
                    <listitem>For curves there are two update modes, resulting in different quality in output: During the update following a
                        mouse move event, a curve is plotted evaluationg only few data points. The default value is 400 points.
                        In the update follwoing a mouse up event the same curve is plotted with much more points. The default value
                        now is 200 points. These values can be adapted in Options.js.
                        </listitem>
                    <listitem>Reducing the download and initalization time: The JavaScript source code of 
                        JSXGraph version 0.76 consists of 20 files, which add up to about 980 kBytes including comments.
                        These 20 files are bundled together in one big file which is subsequently compressed by the 
                        YUI compressor<footnote><para><ulink url="http://developer.yahoo.com/yui/compressor/">http://developer.yahoo.com/yui/compressor/</ulink></para>              </footnote>. During this process comments and superfluous whitespace are removed. The resulting file jsxgraphcore.js
                        only consists of 380 kBytes. If the web server which delivers jsxgraphcore.js has DEFLATE enabled, which means it
                        compresses its output additionally with gzip, the web browser has to download about 80 kByte. 
                        In most cases, this is less than the same construction would take as non-interactive PNG image.
                        </listitem>
                     <listitem>A very special, but decisive speed improvement has been done for the Internet Explorer.  
                     </listitem>
                </itemizedlist>
                
            </para>
        </section>  
    </section>       
    <bibliography xmlns="http://docbook.org/ns/docbook">
        <bibliodiv><title>Books</title>
            
            <biblioentry xml:id="AhoSethiUllman96">
                <abbrev>AhoSethiUllman96</abbrev>
                <authorgroup>
                    <author><personname>
                        <firstname>Alfred V.</firstname><surname>Aho</surname>
                    </personname></author>
                    <author><personname>
                        <firstname>Ravi</firstname><surname>Sethi</surname>
                    </personname></author>
                    <author><personname>
                        <firstname>Jeffrey D.</firstname><surname>Ullman</surname>
                    </personname></author>
                </authorgroup>
                <copyright><year>1996</year>
                    <holder>Bell Telephone Laboratories, Inc.</holder></copyright>
                <editor><personname>
                    <firstname>James T.</firstname><surname>DeWolf</surname>
                </personname></editor>
                <biblioid class="isbn">0-201-10088-6</biblioid>
                <publisher>
                    <publishername>Addison-Wesley Publishing Company</publishername>
                </publisher>
                <title>Compilers, Principles, Techniques, and Tools</title>
            </biblioentry>
            
            <biblioentry xreflabel="Kites75">
                <authorgroup>
                    <author><personname>
                        <firstname>Andrea</firstname><surname>Bahadur</surname>
                    </personname></author>
                    <author><personname>
                        <firstname>Mark</firstname><surname>Shwarek</surname>
                    </personname></author>
                </authorgroup>
                <copyright><year>1974</year><year>1975</year>
                    <holder>Product Development International Holding N. V.</holder>
                </copyright>
                <biblioid class="isbn">0-88459-021-6</biblioid>
                <publisher>
                    <publishername>Plenary Publications International, Inc.</publishername>
                </publisher>
                <title>Kites</title>
                <subtitle>Ancient Craft to Modern Sport</subtitle>
                <pagenums>988-999</pagenums>
            </biblioentry>
            
        </bibliodiv>
        <bibliodiv><title>Periodicals</title>
            
            <biblioentry>
                <abbrev>Walsh97</abbrev>
                <biblioset relation="journal">
                    <title>XML: Principles, Tools, and Techniques</title>
                    <publisher>
                        <publishername>O'Reilly &amp; Associates, Inc.</publishername>
                    </publisher>
                    <biblioid class="issn">1085-2301</biblioid>
                    <editor><personname>
                        <firstname>Dan</firstname><surname>Connolly</surname>
                    </personname></editor>
                </biblioset>
                <biblioset relation="article">
                    <title>A Guide to XML</title>
                    <author><personname>
                        <surname>Walsh</surname><firstname>Norman</firstname>
                    </personname></author>
                    <copyright><year>1997</year><holder>ArborText, Inc.</holder></copyright>
                    <pagenums>97-108</pagenums>
                </biblioset>
            </biblioentry>
            
        </bibliodiv>
        
    </bibliography>
</article>