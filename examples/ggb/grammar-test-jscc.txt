/~ --- Token definitions --- ~/

/~ Characters to be ignored ~/
!   ' |\t' ;

/~ Non-associative tokens ~/
    '\('
    '\)'
    '\='
    '[0-9]+'                        INT    [* %match = parseInt( %match ); *]
    '[0-9]+\.[0-9]*|[0-9]*\.[0-9]+' FLOAT  [* %match = parseFloat( %match ); *]
    '\_\_[a-zA-Z0-9]+'              PARAM  [* %match = 'param: '+ %match; *]
    '[a-zA-Z]+(\_*[a-zA-Z0-9]+)*'   VAR    [* %match = 'var: '+ %match; *]
    '\&[a-zA-Z]+\;'                 HTML   [* %match = 'html: '+ %match; *]
    '\"[a-zA-Z0-9\.\ ]*\"'          STRING [* %match = 'string: '+ %match; *]
    ;

/~ Left-associative tokens, lowest precedence ~/
<  '\+'
   '\,'
   '\-';
        
/~ Left-associative tokens, highest precedence ~/
<  '\*'
   '/';

##

/~ --- Grammar specification --- ~/

p:      e              [* alert('end: '+ %1 ); *]
        ;


e:        e ',' e      [* %% = 'coord: ('+ %1 +', '+ %3 +')'; *]
        | e '+' e      [* %% = %1 + %3; *]
        | e '-' e      [* %% = %1 - %3; *]
        | e '*' e      [* %% = %1 * %3; *]
        | e '/' e      [* %% = %1 / %3; *]
        | '-' e &'*'   [* %% = %2 * -1; *]
        | '(' e ')'    [* %% = %2; *]
        | STRING '+' e [* %% = 'string: '+  %1 +'--'+ %3; *]
        | INT          [* %% = %1; *]
        | FLOAT        [* %% = %1; *]
        | PARAM        [* %% = %1; *]
        | HTML         [* %% = %1; *]
        | STRING       [* %% = %1; *]
        | VAR '(' e ')' [* %% = 'var('+ %1 +', '+ %3 +')'; *]
        | VAR           [* %% = 'var: '+ %1; *]
        | VAR '(' PARAM ')' '\=' e    [* %% = 'Function('+ %3 +', '+ %6 +')'; *]
        ;
/~ VAR '(' e ')' in conflict with VAR '(' PARAM ... with sin(__x) vs. f(x) = ...  ~/
